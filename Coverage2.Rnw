\documentclass{article}

\begin{document}

<<>>=
#source("https://bioconductor.org/biocLite.R")
#biocLite("GenomicRanges")
#biocLite("rtracklayer")
#biocLite("GenomicAlignments")
library(GenomicRanges)
library(GenomicAlignments)
library(rtracklayer)
library(parallel)
source(file = "~/ISGlobal/Scripts/Funcions_1.R")
@


<<>>=
in_path <- "/home/lucas/ISGlobal/Chip_Seq/DATA/Aligns"
files <- list.files(path = "/home/lucas/ISGlobal/Chip_Seq/DATA/Aligns")
bams <- files[substrR(files, 8) == "sort.bam"]
bams <- lapply(bams, function(x) paste0(in_path,"/",x))
me_bams <- bams[substrR(bams, 11) == "me_sort.bam"]
aligns <- lapply(me_bams, readGAlignmentPairs)
@

%% ---------------------------------------------------------------------------
\subsection{Calculating Coverage}
<<calc_cov>>=
cov <- lapply(aligns, coverage)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Normalization}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% ----------------------------------------------------------------------------
\subsection{By Number of Mapped Reads} %% -------------------------------------
%% samtools view -F 0x4 foo_sorted.bam | cut -f 1 | sort | uniq | wc -l 

\noindent To get the number of mapped reads in the sample we use \texttt{samtools} as follows:

\begin{verbatim}
samtools view -F 0x4 foo.sorted.bam | cut -f 1 | sort | uniq | wc -l
-F : tells samtools to exclude given flag. Flag 0x4 means unaligned.
\end{verbatim}

<<>>=
nreads <- c()
for (file in me_bams) {
  cmd <- paste0("/home/lucas/Programs/samtools-1.3.1/samtools view -F 0x4 ", file, " | cut -f 1 | sort | uniq | wc -l")
  nreads <- c(nreads,system(cmd, intern = TRUE))
}
names(nreads) <- me_bams
@

\subsection{Normalize Coverage}
\noindent Normalize the coverage divding by the number of mapped reads (abd multiplying by a huge factor).
<<>>=
norm_cov <- c()
for (i in range(1,length(nreads))){
  norm_cov <- c(norm_cov, cov[[i]]/as.numeric(nreads[i])*1000000000)
}
names(norm_cov) <- me_bams
@


<<export_norm_n_reads, eval=FALSE>>=
for (i in range(1, length(norm_cov))){
  con <- gsub("_sort.bam", "_cov.bed", bams[i])
  export(norm_cov[[i]], con = con, format = "BED")
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Substractions}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<i7_i8, eval=FALSE>>=
subs_list <- combn(me_bams, 2, simplify = FALSE)
for (element in subs_list){
  substract <- 
}

substraction_A7K9_E5K9 <- norm_cov[[1]] - norm_cov[[2]]
export(substraction_A7K9_E5K9, con = "/home/lucas/ISGlobal/Chip_Seq/DATA/Substractions/A7K9_E5K9_substr.bed", format = "BED")

smooth_sub <- runmean(substraction_A7K9_E5K9, 10, endrule = "constant")
export(smooth_sub, con = "/home/lucas/ISGlobal/Chip_Seq/DATA/Substractions/A7K9_E5K9_substr_smooth.bed", format = "BED")

smooth_sub <- runmean(substraction_A7K9_E5K9, 1000, endrule = "constant")
export(smooth_sub, con = "/home/lucas/ISGlobal/Chip_Seq/DATA/Substractions/A7K9_E5K9_substr_smooth1000.bed", format = "BED")

smoothviews <- lapply(substraction_A7K9_E5K9, function(x) {successiveViews(x, width = 10)})
lapply(smoothviews, function(x) {mean(x)})
#class(substraction_A7K9_E5K9)
@

\section{Session Info}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<session_info, cache=FALSE>>=
sessionInfo()
@
\end{document}